/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var v=Object.defineProperty;var j=Object.getOwnPropertyDescriptor;var G=Object.getOwnPropertyNames;var R=Object.prototype.hasOwnProperty;var H=(o,n)=>{for(var t in n)v(o,t,{get:n[t],enumerable:!0})},J=(o,n,t,e)=>{if(n&&typeof n=="object"||typeof n=="function")for(let r of G(n))!R.call(o,r)&&r!==t&&v(o,r,{get:()=>n[r],enumerable:!(e=j(n,r))||e.enumerable});return o};var K=o=>J(v({},"__esModule",{value:!0}),o);var Q={};H(Q,{default:()=>x});module.exports=K(Q);var V=require("obsidian");var f=require("obsidian"),P=class extends f.PluginSettingTab{constructor(t,e){super(t,e);this.plugin=e}display(){let{containerEl:t}=this;t.empty(),new f.Setting(t).setName("PDF folder").setDesc("Folder to save imported PDFs").addText(e=>e.setPlaceholder("Example: Assets").setValue(this.plugin.settings.pdfFolder).onChange(async r=>{this.plugin.settings.pdfFolder=r,await this.plugin.saveSettings()})),new f.Setting(t).setName("Note folder").setDesc("Folder to save auto-generated notes for imported PDFs").addText(e=>e.setPlaceholder("Example: Notes").setValue(this.plugin.settings.noteFolder).onChange(async r=>{this.plugin.settings.noteFolder=r,await this.plugin.saveSettings()}))}},X={pdfFolder:"Assets",noteFolder:"Literature Notes"};var i=require("obsidian");var z=require("obsidian");async function B(o){var g,h,F,S,I,E,b,$,A,q,D,T,C,_,k,U,N;let n=`https://export.arxiv.org/api/query?id_list=${o}`,t=await(0,z.requestUrl)({url:n}),a=new DOMParser().parseFromString(t.text,"text/xml").querySelector("entry"),s=(h=(g=a.querySelector("title"))==null?void 0:g.textContent)==null?void 0:h.trim();if(!s||s==="Error"){let y=((S=(F=a.querySelector("summary"))==null?void 0:F.textContent)==null?void 0:S.trim())||"Unknown error";throw new Error(y)}let l=Array.from(a.querySelectorAll("author")).map(y=>{var M,L;return((L=(M=y.querySelector("name"))==null?void 0:M.textContent)==null?void 0:L.trim())||"Unknown author"}),d=((E=(I=a.querySelector("published"))==null?void 0:I.textContent)==null?void 0:E.trim())||"",m=(($=(b=a.querySelector("summary"))==null?void 0:b.textContent)==null?void 0:$.trim().replace(/\n/g," ").replace(/"/g,"'"))||"No abstract available",p=((q=(A=a.querySelector("comment"))==null?void 0:A.textContent)==null?void 0:q.trim())||"",u=((_=(C=(T=(D=a.querySelector("id"))==null?void 0:D.textContent)==null?void 0:T.split("abs/"))==null?void 0:C.pop())==null?void 0:_.trim())||"",c=((N=(U=(k=a.querySelector("link[title='pdf']"))==null?void 0:k.getAttribute("href"))==null?void 0:U.trim())==null?void 0:N.replace(/^http:\/\//i,"https://"))||"";return{paperId:u,title:s,authors:l,date:d,abstract:m,comments:p,pdfUrl:c}}var O=`---
paper id: {{ paper_id }}
title: {{ title }}
authors: {{ authors }}
publication date: {{ date }}
abstract: {{ abstract }}
comments: {{ comments }}
pdf: {{ pdf_link }}
url: https://arxiv.org/abs/{{ paper_id }}
tags: []
---
`;var w=class extends i.Modal{constructor(t,e){super(t);this.settings=e}onOpen(){let{contentEl:t}=this;t.createEl("h4",{text:"Import Paper from arXiv"}),t.createEl("p",{text:"Enter the arXiv ID or URL of the paper you want to import. Press Enter to confirm.",attr:{style:"margin-bottom: 20px; color: gray"}}),t.createEl("input",{attr:{type:"text",style:"width: 100%;",id:"paper-title-input"}}),t.addEventListener("keypress",async e=>{if(e.key==="Enter"){new i.Notice("Importing paper...");let r=t.querySelector("#paper-title-input").value,a;try{a=this.extractArxivId(r)}catch(s){new i.Notice(s.message);return}try{let[s,l]=await this.searchAndImportPaper(a);await this.app.workspace.openLinkText(s,"",!0)}catch(s){new i.Notice(s.message)}new i.Notice("Paper imported!"),this.close()}})}onClose(){let{contentEl:t}=this;t.empty()}async searchAndImportPaper(t){let e=await B(t),r=(0,i.normalizePath)(this.settings.pdfFolder),a=this.app.vault.getFolderByPath(r);a||(a=await this.app.vault.createFolder(r));let s=this.sanitizeFilename(`${e.title} (${e.paperId}).pdf`),l=(0,i.normalizePath)(`${a.path}/${s}`),d=await(0,i.requestUrl)(e.pdfUrl);await this.app.vault.adapter.writeBinary(l,d.arrayBuffer);let m=(0,i.normalizePath)(this.settings.noteFolder),p=this.app.vault.getFolderByPath(m);p||(p=await this.app.vault.createFolder(m));let u=this.sanitizeFilename(`${e.title} (${e.paperId}).md`),c=(0,i.normalizePath)(`${p.path}/${u}`),g=O.replace(/{{\s*paper_id\s*}}/g,e.paperId).replace(/{{\s*title\s*}}/g,`"${e.title}"`).replace(/{{\s*authors\s*}}/g,e.authors.join(", ")).replace(/{{\s*date\s*}}/g,e.date).replace(/{{\s*abstract\s*}}/g,`"${e.abstract}"`).replace(/{{\s*comments\s*}}/g,`"${e.comments}"`).replace(/{{\s*pdf_link\s*}}/g,`"[[${l}]]"`);return await this.app.vault.adapter.write(c,g),[c,l]}extractArxivId(t){let e=/^ar[Xx]iv:(\d{4}\.\d{4,5})(?:v\d+)?$/,r=t.match(e);if(r)return r[r.length-1];let a=/^ar[Xx]iv:(.+\/\d+)(?:v\d+)?$/,s=t.match(a);if(s)return s[s.length-1];let l=/^(https?:\/\/)?(www\.)?arxiv\.org\/(abs|pdf)\/(\d{4}\.\d{4,5})(?:v\d+)?$/,d=t.match(l);if(d)return d[d.length-1];let m=/^(https?:\/\/)?(www\.)?arxiv\.org\/(abs|pdf)\/(.+\/\d+)(?:v\d+)?$/,p=t.match(m);if(p)return p[p.length-1];let u=/^(\d{4}\.\d{4,5})(?:v\d+)?$/,c=t.match(u);if(c)return c[c.length-1];let g=/^(\d+\/\d+)(?:v\d+)?$/,h=t.match(g);if(h)return h[h.length-1];throw new Error("Invalid arXiv ID or URL")}sanitizeFilename(t){return t.replace(/[/\\?%*:|"<>]/g," ").replace(/\s+/g," ").trim()}};var x=class extends V.Plugin{async onload(){await this.loadSettings(),this.addCommand({id:"import_pdf_from_arxiv",name:"Import PDF from arXiv",callback:()=>{new w(this.app,this.settings).open()}}),this.addSettingTab(new P(this.app,this))}onunload(){}async loadSettings(){this.settings=Object.assign({},X,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}};

/* nosourcemap */